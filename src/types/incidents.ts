// Auto-generated TypeScript types for Kingdom Incidents
// Generated by scripts/generate-types.py
// DO NOT EDIT MANUALLY - Run 'npm run generate-types' to update

/**
 * NOTE: Incidents use the same core structure as Events.
 * We re-export event types and add incident-specific interface.
 * 
 * Incidents use the EventTier type (minor, moderate, major) from events.
 * The JSON has a redundant 'severity' field which we ignore in favor of 'tier'.
 */

// Re-export all event types for use with incidents
export type {
  EventSkill,
  KingdomSkill,
  EventTrait,
  EventLocation,
  EventTier,
  ResourceType,
  ModifierDuration,
  EventModifier,
  EventOutcome,
  EventEffects,
  KingdomEvent
} from './events';

/**
 * Kingdom Incident (same structure as event)
 * 
 * Incidents are similar to events but:
 * - Always triggered by high Unrest (not random)
 * - Have severity tiers (minor, moderate, major) via EventTier
 * - Use same skill/effect structure as events
 */
export interface KingdomIncident {
  id: string;
  name: string;
  description: string;
  tier: EventTier;  // Severity tier (minor, moderate, major)
  skills?: EventSkill[];
  effects: EventEffects;
  special?: string;
  ifUnresolved?: any;  // TODO: Define proper structure when needed
}

/**
 * Type guard to check if an object is a KingdomIncident
 */
export function isKingdomIncident(obj: any): obj is KingdomIncident {
  return (
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    typeof obj.description === 'string' &&
    typeof obj.tier === 'string' &&
    typeof obj.effects === 'object'
  );
}
