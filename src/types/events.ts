// Auto-generated TypeScript types from Kingdom data
// Generated by scripts/generate-types.py
// DO NOT EDIT MANUALLY - Run 'npm run generate-types' to update

/**
 * Kingdom Event skill with description
 */
export interface EventSkill {
  skill: KingdomSkill;
  description: string;
}

/**
 * All available kingdom skills
 */
export type KingdomSkill = 
  | "acrobatics"
  | "arcana"
  | "athletics"
  | "crafting"
  | "deception"
  | "diplomacy"
  | "intimidation"
  | "lore"
  | "medicine"
  | "nature"
  | "occultism"
  | "performance"
  | "religion"
  | "society"
  | "stealth"
  | "survival"
  | "thievery";

/**
 * Event trait types
 */
export type EventTrait = 
  | "beneficial"
  | "continuous"
  | "dangerous";

/**
 * Modifier selector types (what the modifier affects)
 */
export type ModifierSelector = 
  | "damage_structure"
  | "destroy_structure"
  | "fame"
  | "food"
  | "gold"
  | "hex"
  | "imprisoned_unrest"
  | "resources"
  | "unrest";

/**
 * Event location types
 */
export type EventLocation = 
  | ""
  | "Capital or largest settlement"
  | "Choose or roll for a neighboring kingdom"
  | "Kingdom-wide (check in capital or largest settlement)"
  | "Largest settlement"
  | "Largest settlement with valuable structures"
  | "Largest settlement, then spreads"
  | "Random PC"
  | "Random Settlement"
  | "Random settlement"
  | "Settlement with knowledge structures or largest settlement"
  | "Settlement with military structures or the largest settlement"
  | "a random worksite and 2 adjacent hexes (roll 1d6)";

/**
 * Event modifier details
 */
export interface EventModifier {
  type: string;
  name: string;
  value: number;
  selector: ModifierSelector;
  enabled: boolean;
  turns?: number;
  choice?: string[];
}

/**
 * Event outcome with message and modifiers
 */
export interface EventOutcome {
  msg: string;
  modifiers: EventModifier[];
}

/**
 * Event effects (outcomes for different degrees of success)
 */
export interface EventEffects {
  criticalSuccess?: EventOutcome;
  success?: EventOutcome;
  failure?: EventOutcome;
  criticalFailure?: EventOutcome;
}

/**
 * Unresolved event configuration
 */
export interface UnresolvedEvent {
  type: 'continuous' | 'auto-resolve' | 'expires';
  continuous?: {
    becomesModifier: boolean;
    modifierTemplate?: {
      name: string;
      description?: string;
      duration: string | number;
      severity: 'beneficial' | 'neutral' | 'dangerous' | 'critical';
      effects: Record<string, any>;
      resolution?: {
        skills: KingdomSkill[];
        dc?: number;
        automatic?: {
          condition: string;
          description: string;
        };
      };
      escalation?: any;
      icon?: string;
      priority?: number;
    };
  };
  expires?: {
    message?: string;
    effects?: Record<string, number>;
    turnsUntilTransform?: number;
    transformsTo?: string;
  };
}

/**
 * Kingdom Event data structure
 */
export interface KingdomEvent {
  id: string;
  name: string;
  description: string;
  traits?: EventTrait[];
  location?: EventLocation | string;
  modifier?: number;
  resolvedOn?: string[];
  skills?: EventSkill[];
  effects: EventEffects;
  special?: string;
  ifUnresolved?: UnresolvedEvent;
}

/**
 * Type guard to check if an object is a KingdomEvent
 */
export function isKingdomEvent(obj: any): obj is KingdomEvent {
  return (
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    typeof obj.description === 'string' &&
    typeof obj.effects === 'object'
  );
}
