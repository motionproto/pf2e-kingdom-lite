// Auto-generated TypeScript types from Kingdom data
// Generated by scripts/generate-types.py
// DO NOT EDIT MANUALLY - Run 'npm run generate-types' to update

/**
 * Kingdom Event skill with description
 */
export interface EventSkill {
  skill: KingdomSkill;
  description: string;
}

/**
 * All available kingdom skills
 */
export type KingdomSkill = 
  | "acrobatics"
  | "arcana"
  | "athletics"
  | "crafting"
  | "deception"
  | "diplomacy"
  | "intimidation"
  | "lore"
  | "medicine"
  | "nature"
  | "occultism"
  | "performance"
  | "religion"
  | "society"
  | "stealth"
  | "survival"
  | "thievery";

/**
 * Event trait types
 */
export type EventTrait = 
  | "beneficial"
  | "continuous"
  | "dangerous";

/**
 * Modifier selector types (what the modifier affects)
 */
export type ModifierSelector = 
;

/**
 * Event location types
 */
export type EventLocation = 
  | ""
  | "Capital or largest settlement"
  | "Choose or roll for a neighboring kingdom"
  | "Kingdom-wide (check in capital or largest settlement)"
  | "Largest settlement"
  | "Largest settlement with valuable structures"
  | "Largest settlement, then spreads"
  | "Random PC"
  | "Random Settlement"
  | "Random settlement"
  | "Settlement with knowledge structures or largest settlement"
  | "Settlement with military structures or the largest settlement"
  | "a random worksite and 2 adjacent hexes (roll 1d6)";

/**
 * Event tier types (standardized: all events are 'minor', incidents vary)
 */
export type EventTier = 'minor' | 'moderate' | 'major';

/**
 * Resource types that can be modified
 */
export type ResourceType = 'gold' | 'food' | 'lumber' | 'stone' | 'ore' | 'luxuries' | 'unrest' | 'fame';

/**
 * Modifier duration types
 */
export type ModifierDuration = 'immediate' | 'ongoing' | 'permanent' | 'turns';

/**
 * Event modifier details (simplified from actual JSON structure)
 */
export interface EventModifier {
  name: string;
  resource: ResourceType;
  value: number;
  duration: ModifierDuration;
  turns?: number;  // Required if duration === 'turns'
}

/**
 * Event outcome with message and modifiers
 */
export interface EventOutcome {
  msg: string;
  endsEvent?: boolean;
  modifiers: EventModifier[];
}

/**
 * Event effects (outcomes for different degrees of success)
 */
export interface EventEffects {
  criticalSuccess?: EventOutcome;
  success?: EventOutcome;
  failure?: EventOutcome;
  criticalFailure?: EventOutcome;
}

/**
 * Kingdom Event data structure (matches actual JSON structure)
 */
export interface KingdomEvent {
  id: string;
  name: string;
  description: string;
  tier: EventTier;
  traits?: EventTrait[];
  location?: EventLocation | string;
  modifier?: number;
  resolvedOn?: string[];
  skills?: EventSkill[];
  effects: EventEffects;
  special?: string;
  ifUnresolved?: any;  // TODO: Define proper structure when needed
}

/**
 * Kingdom Incident (same structure as event with tier variations)
 */
export interface KingdomIncident extends KingdomEvent {
  tier: EventTier;  // 'minor' | 'moderate' | 'major'
}

/**
 * Type guard to check if an object is a KingdomEvent
 */
export function isKingdomEvent(obj: any): obj is KingdomEvent {
  return (
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    typeof obj.description === 'string' &&
    typeof obj.effects === 'object'
  );
}
