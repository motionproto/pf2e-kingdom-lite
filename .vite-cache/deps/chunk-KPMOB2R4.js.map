{
  "version": 3,
  "sources": ["../../../../../../program/Javascript/projects/TyphonJS/typhonjs-svelte/runtime-base/_dist/util/object/index.js"],
  "sourcesContent": ["function set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\n/**\n * Provides common object manipulation utility functions and TypeScript type guards.\n *\n * @packageDocumentation\n */\n/**\n * Freezes all entries traversed that are objects including entries in arrays.\n *\n * @param data - An object or array.\n *\n * @param [options] - Options\n *\n * @param [options.skipKeys] - A Set of strings indicating keys of objects to not freeze.\n *\n * @returns The frozen object.\n *\n * @typeParam T - Type of data.\n */\nfunction deepFreeze(data, { skipKeys } = {}) {\n    if (typeof data !== 'object' || data === null) {\n        throw new TypeError(`deepFreeze error: 'data' is not an object or array.`);\n    }\n    if (skipKeys !== void 0 && Object.prototype.toString.call(skipKeys) !== '[object Set]') {\n        throw new TypeError(`deepFreeze error: 'options.skipKeys' is not a Set.`);\n    }\n    const stack = [data];\n    while (stack.length > 0) {\n        const obj = stack.pop();\n        if (typeof obj !== 'object' || obj === null || Object.isFrozen(obj)) {\n            continue;\n        }\n        // Collect nested properties before freezing.\n        const children = [];\n        if (Array.isArray(obj)) {\n            for (let cntr = 0; cntr < obj.length; cntr++) {\n                children.push(obj[cntr]);\n            }\n        }\n        else {\n            for (const key in obj) {\n                if (Object.hasOwn(obj, key) && !skipKeys?.has?.(key)) {\n                    children.push(obj[key]);\n                }\n            }\n        }\n        // Freeze after collecting children to avoid modifying a frozen object.\n        Object.freeze(obj);\n        // Push collected children onto the stack for further processing.\n        stack.push(...children);\n    }\n    return data;\n}\nfunction deepMerge(target, ...sourceObj) {\n    if (Object.prototype.toString.call(target) !== '[object Object]') {\n        throw new TypeError(`deepMerge error: 'target' is not an object.`);\n    }\n    if (sourceObj.length === 0) {\n        throw new TypeError(`deepMerge error: 'sourceObj' is not an object.`);\n    }\n    for (let cntr = 0; cntr < sourceObj.length; cntr++) {\n        if (Object.prototype.toString.call(sourceObj[cntr]) !== '[object Object]') {\n            throw new TypeError(`deepMerge error: 'sourceObj[${cntr}]' is not an object.`);\n        }\n    }\n    // When merging a single source object there is an implementation that is twice as fast as multiple source objects.\n    if (sourceObj.length === 1) {\n        const stack = [];\n        for (const obj of sourceObj) {\n            stack.push({ target, source: obj });\n        }\n        while (stack.length > 0) {\n            const { target, source } = stack.pop(); // LIFO but maintains correct merge order.\n            for (const prop in source) {\n                if (Object.hasOwn(source, prop)) {\n                    const sourceValue = source[prop];\n                    const targetValue = target[prop];\n                    // If both values are plain objects, enqueue for further merging.\n                    if (Object.hasOwn(target, prop) && targetValue?.constructor === Object &&\n                        sourceValue?.constructor === Object) {\n                        stack.push({ target: targetValue, source: sourceValue });\n                    }\n                    else {\n                        target[prop] = sourceValue;\n                    }\n                }\n            }\n        }\n    }\n    else // Stack implementation for multiple source objects.\n     {\n        const stack = [{ target, sources: sourceObj }];\n        while (stack.length > 0) {\n            const { target, sources } = stack.pop();\n            for (const source of sources) {\n                for (const prop in source) {\n                    if (Object.hasOwn(source, prop)) {\n                        const sourceValue = source[prop];\n                        const targetValue = target[prop];\n                        // If both values are plain objects, push for further merging with a new object.\n                        if (Object.hasOwn(target, prop) && targetValue?.constructor === Object &&\n                            sourceValue?.constructor === Object) {\n                            target[prop] = Object.assign({}, targetValue); // Copy existing target data.\n                            stack.push({ target: target[prop], sources: [sourceValue] });\n                        }\n                        else {\n                            target[prop] = sourceValue;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return target;\n}\n/**\n * Seals all entries traversed that are objects including entries in arrays.\n *\n * @param data - An object or array.\n *\n * @param [options] - Options\n *\n * @param [options.skipKeys] - A Set of strings indicating keys of objects to not seal.\n *\n * @returns The sealed object.\n *\n * @typeParam T - Type of data.\n */\nfunction deepSeal(data, { skipKeys } = {}) {\n    if (typeof data !== 'object' || data === null) {\n        throw new TypeError(`deepSeal error: 'data' is not an object or array.`);\n    }\n    if (skipKeys !== void 0 && Object.prototype.toString.call(skipKeys) !== '[object Set]') {\n        throw new TypeError(`deepSeal error: 'options.skipKeys' is not a Set.`);\n    }\n    const stack = [data];\n    while (stack.length > 0) {\n        const obj = stack.pop();\n        if (typeof obj !== 'object' || obj === null || Object.isSealed(obj)) {\n            continue;\n        }\n        // Collect nested properties before freezing.\n        const children = [];\n        if (Array.isArray(obj)) {\n            for (let cntr = 0; cntr < obj.length; cntr++) {\n                children.push(obj[cntr]);\n            }\n        }\n        else {\n            for (const key in obj) {\n                if (Object.hasOwn(obj, key) && !skipKeys?.has?.(key)) {\n                    children.push(obj[key]);\n                }\n            }\n        }\n        // Freeze after collecting children to avoid modifying a frozen object.\n        Object.seal(obj);\n        // Push collected children onto the stack for further processing.\n        stack.push(...children);\n    }\n    return data;\n}\n/**\n * Determine if the given object has a getter & setter accessor.\n *\n * @param object - An object.\n *\n * @param accessor - Accessor to test.\n *\n * @returns Whether the given object has the getter and setter for accessor.\n *\n * @typeParam T - Type of data.\n * @typeParam K - Accessor key.\n */\nfunction hasAccessor(object, accessor) {\n    if (typeof object !== 'object' || object === null || object === void 0) {\n        return false;\n    }\n    // Check for instance accessor.\n    const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\n    if (iDescriptor !== void 0 && iDescriptor.get !== void 0 && iDescriptor.set !== void 0) {\n        return true;\n    }\n    // Walk parent prototype chain. Check for descriptor at each prototype level.\n    for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o)) {\n        const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\n        if (descriptor !== void 0 && descriptor.get !== void 0 && descriptor.set !== void 0) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Determine if the given object has a getter accessor.\n *\n * @param object - An object.\n *\n * @param accessor - Accessor to test.\n *\n * @returns Whether the given object has the getter for accessor.\n *\n * @typeParam T - Type of data.\n * @typeParam K - Accessor key.\n */\nfunction hasGetter(object, accessor) {\n    if (typeof object !== 'object' || object === null || object === void 0) {\n        return false;\n    }\n    // Check for instance accessor.\n    const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\n    if (iDescriptor !== void 0 && iDescriptor.get !== void 0) {\n        return true;\n    }\n    // Walk parent prototype chain. Check for descriptor at each prototype level.\n    for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o)) {\n        const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\n        if (descriptor !== void 0 && descriptor.get !== void 0) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns whether the target is or has the given prototype walking up the prototype chain.\n *\n * @param target - Any target class / constructor function to test.\n *\n * @param Prototype - Class / constructor function to find.\n *\n * @returns Target matches prototype.\n *\n * @typeParam T - Prototype class / constructor.\n */\nfunction hasPrototype(target, Prototype) {\n    if (typeof target !== 'function') {\n        return false;\n    }\n    if (target === Prototype) {\n        return true;\n    }\n    // Walk parent prototype chain. Check for descriptor at each prototype level.\n    for (let proto = Object.getPrototypeOf(target); proto; proto = Object.getPrototypeOf(proto)) {\n        if (proto === Prototype) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Determine if the given object has a setter accessor.\n *\n * @param object - An object.\n *\n * @param accessor - Accessor to test.\n *\n * @returns Whether the given object has the setter for accessor.\n *\n * @typeParam T - Type of data.\n * @typeParam K - Accessor key.\n */\nfunction hasSetter(object, accessor) {\n    if (typeof object !== 'object' || object === null || object === void 0) {\n        return false;\n    }\n    // Check for instance accessor.\n    const iDescriptor = Object.getOwnPropertyDescriptor(object, accessor);\n    if (iDescriptor !== void 0 && iDescriptor.set !== void 0) {\n        return true;\n    }\n    // Walk parent prototype chain. Check for descriptor at each prototype level.\n    for (let o = Object.getPrototypeOf(object); o; o = Object.getPrototypeOf(o)) {\n        const descriptor = Object.getOwnPropertyDescriptor(o, accessor);\n        if (descriptor !== void 0 && descriptor.set !== void 0) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Tests for whether an object is async iterable.\n *\n * @param value - Any value.\n *\n * @returns Whether value is async iterable.\n */\nfunction isAsyncIterable(value) {\n    if (typeof value !== 'object' || value === null || value === void 0) {\n        return false;\n    }\n    return Symbol.asyncIterator in value;\n}\n/**\n * Tests for whether an object is iterable.\n *\n * @param value - Any value.\n *\n * @returns Whether object is iterable.\n */\nfunction isIterable(value) {\n    if (value === null || value === void 0 || typeof value !== 'object') {\n        return false;\n    }\n    return Symbol.iterator in value;\n}\n/**\n * Tests for whether object is not null, typeof object, and not an array.\n *\n * @param value - Any value.\n *\n * @returns Is it an object.\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n/**\n * Tests for whether the given value is a plain object.\n *\n * An object is plain if it is created by either: `{}`, `new Object()` or `Object.create(null)`.\n *\n * @param value - Any value\n *\n * @returns Is it a plain object.\n */\nfunction isPlainObject(value) {\n    if (Object.prototype.toString.call(value) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Safely returns keys on an object or an empty array if not an object.\n *\n * @param object - An object.\n *\n * @returns Object keys or empty array.\n */\nfunction objectKeys(object) {\n    return typeof object === 'object' && object !== null ? Object.keys(object) : [];\n}\n/**\n * Safely returns an objects size. Note for String objects Unicode is not taken into consideration.\n *\n * @param object - Any value, but size returned for object / Map / Set / arrays / strings.\n *\n * @returns Size of object.\n */\nfunction objectSize(object) {\n    if (object === void 0 || object === null || typeof object !== 'object') {\n        return 0;\n    }\n    const tag = Object.prototype.toString.call(object);\n    if (tag === '[object Map]' || tag === '[object Set]') {\n        return object.size;\n    }\n    if (tag === '[object String]') {\n        return object.length;\n    }\n    return Object.keys(object).length;\n}\n/**\n * Provides a way to safely access an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param data - An object to access entry data.\n *\n * @param accessor - A string describing the entries to access with keys separated by `.`.\n *\n * @param [defaultValue] - (Optional) A default value to return if an entry for accessor is not found.\n *\n * @returns The value referenced by the accessor.\n *\n * @typeParam T - Type of data.\n * @typeParam P - Accessor type.\n * @typeParam R - Return value / Inferred deep access type or any provided default value type.\n */\nfunction safeAccess(data, accessor, defaultValue) {\n    if (typeof data !== 'object' || data === null) {\n        return defaultValue;\n    }\n    if (typeof accessor !== 'string') {\n        return defaultValue;\n    }\n    const keys = accessor.split('.');\n    let result = data;\n    // Walk through the given object by the accessor indexes.\n    for (let cntr = 0; cntr < keys.length; cntr++) {\n        // If the next level of object access is undefined or null then return the default value.\n        if (result[keys[cntr]] === void 0 || result[keys[cntr]] === null) {\n            return defaultValue;\n        }\n        result = result[keys[cntr]];\n    }\n    return result;\n}\n/**\n * Compares a source object and values of entries against a target object. If the entries in the source object match\n * the target object then `true` is returned otherwise `false`. If either object is undefined or null then false\n * is returned.\n *\n * Note: The source and target should be JSON objects.\n *\n * @param source - Source object.\n *\n * @param target - Target object.\n *\n * @param [options] - Options.\n *\n * @param [options.arrayIndex] - Set to `false` to exclude equality testing for array contents; default: `true`.\n *\n * @param [options.hasOwnOnly] - Set to `false` to include enumerable prototype properties; default: `true`.\n *\n * @returns True if equal.\n */\nfunction safeEqual(source, target, options) {\n    if (typeof source !== 'object' || source === null || typeof target !== 'object' || target === null) {\n        return false;\n    }\n    for (const accessor of safeKeyIterator(source, options)) {\n        const sourceObjectValue = safeAccess(source, accessor);\n        const targetObjectValue = safeAccess(target, accessor);\n        if (sourceObjectValue !== targetObjectValue) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns an iterator of safe keys useful with {@link safeAccess} and {@link safeSet} by traversing the given object.\n *\n * Note: Keys are only generated for JSON objects; {@link Map} and {@link Set} are not indexed.\n *\n * @param data - An object to traverse for accessor keys.\n *\n * @param [options] - Options.\n *\n * @param [options.arrayIndex] - Set to `false` to exclude safe keys for array indexing; default: `true`.\n *\n * @param [options.hasOwnOnly] - Set to `false` to include enumerable prototype properties; default: `true`.\n *\n * @returns Safe key iterator.\n */\nfunction* safeKeyIterator(data, { arrayIndex = true, hasOwnOnly = true } = {}) {\n    if (typeof data !== 'object' || data === null) {\n        throw new TypeError(`safeKeyIterator error: 'data' is not an object.`);\n    }\n    if (typeof arrayIndex !== 'boolean') {\n        throw new TypeError(`safeKeyIterator error: 'options.arrayIndex' is not a boolean.`);\n    }\n    if (typeof hasOwnOnly !== 'boolean') {\n        throw new TypeError(`safeKeyIterator error: 'options.hasOwnOnly' is not a boolean.`);\n    }\n    const stack = [{ obj: data, prefix: '' }];\n    while (stack.length > 0) {\n        const { obj, prefix } = stack.pop();\n        for (const key in obj) {\n            if (hasOwnOnly && !Object.hasOwn(obj, key)) {\n                continue;\n            }\n            const fullKey = prefix ? `${prefix}.${key}` : key;\n            const value = obj[key];\n            if (Array.isArray(value)) {\n                if (!arrayIndex) {\n                    continue;\n                }\n                for (let cntr = 0; cntr < value.length; cntr++) {\n                    yield `${fullKey}.${cntr}`;\n                }\n            }\n            else if (typeof value === 'object' && value !== null) {\n                stack.push({ obj: value, prefix: fullKey }); // Push to stack for DFS traversal.\n            }\n            else if (typeof value !== 'function') {\n                yield fullKey;\n            }\n        }\n    }\n}\n/**\n * Provides a way to safely set an objects data / entries given an accessor string which describes the\n * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n * to walk.\n *\n * @param data - An object to access entry data.\n *\n * @param accessor - A string describing the entries to access.\n *\n * @param value - A new value to set if an entry for accessor is found.\n *\n * @param [options] - Options.\n *\n * @param [options.operation] - Operation to perform including: `add`, `div`, `mult`, `set`, `set-undefined`, `sub`;\n *        default: `set`.\n *\n * @param [options.createMissing] - If `true` missing accessor entries will be created as objects automatically;\n *        default: `false`.\n *\n * @returns True if successful.\n */\nfunction safeSet(data, accessor, value, { operation = 'set', createMissing = false } = {}) {\n    if (typeof data !== 'object' || data === null) {\n        throw new TypeError(`safeSet error: 'data' is not an object.`);\n    }\n    if (typeof accessor !== 'string') {\n        throw new TypeError(`safeSet error: 'accessor' is not a string.`);\n    }\n    if (typeof operation !== 'string') {\n        throw new TypeError(`safeSet error: 'options.operation' is not a string.`);\n    }\n    if (operation !== 'add' && operation !== 'div' && operation !== 'mult' && operation !== 'set' &&\n        operation !== 'set-undefined' && operation !== 'sub') {\n        throw new Error(`safeSet error: Unknown 'options.operation'.`);\n    }\n    if (typeof createMissing !== 'boolean') {\n        throw new TypeError(`safeSet error: 'options.createMissing' is not a boolean.`);\n    }\n    const access = accessor.split('.');\n    let result = false;\n    // Verify first level missing property.\n    if (access.length === 1 && !createMissing && !(access[0] in data)) {\n        return false;\n    }\n    // Walk through the given object by the accessor indexes.\n    for (let cntr = 0; cntr < access.length; cntr++) {\n        // If data is an array perform validation that the accessor is a positive integer otherwise quit.\n        if (Array.isArray(data)) {\n            const number = (+access[cntr]);\n            if (!Number.isInteger(number) || number < 0) {\n                return false;\n            }\n        }\n        if (cntr === access.length - 1) {\n            switch (operation) {\n                case 'add':\n                    data[access[cntr]] += value;\n                    result = true;\n                    break;\n                case 'div':\n                    data[access[cntr]] /= value;\n                    result = true;\n                    break;\n                case 'mult':\n                    data[access[cntr]] *= value;\n                    result = true;\n                    break;\n                case 'set':\n                    data[access[cntr]] = value;\n                    result = true;\n                    break;\n                case 'set-undefined':\n                    if (data[access[cntr]] === void 0) {\n                        data[access[cntr]] = value;\n                    }\n                    result = true;\n                    break;\n                case 'sub':\n                    data[access[cntr]] -= value;\n                    result = true;\n                    break;\n            }\n        }\n        else {\n            // If createMissing is true and the next level of object access is undefined then create a new object entry.\n            if (createMissing && data[access[cntr]] === void 0) {\n                data[access[cntr]] = {};\n            }\n            // Abort if the next level is null or not an object and containing a value.\n            if (data[access[cntr]] === null || typeof data[access[cntr]] !== 'object') {\n                return false;\n            }\n            data = data[access[cntr]];\n        }\n    }\n    return result;\n}\n\nexport { deepFreeze, deepMerge, deepSeal, hasAccessor, hasGetter, hasPrototype, hasSetter, isAsyncIterable, isIterable, isObject, isPlainObject, klona, objectKeys, objectSize, safeAccess, safeEqual, safeKeyIterator, safeSet };\n//# sourceMappingURL=index.js.map\n"],
  "mappings": ";AAAA,SAAS,IAAI,KAAK,KAAK,KAAK;AAC3B,MAAI,OAAO,IAAI,UAAU,SAAU,KAAI,QAAQ,MAAM,IAAI,KAAK;AAC9D,MAAI,CAAC,IAAI,cAAc,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,gBAAgB,CAAC,IAAI,YAAY,QAAQ,aAAa;AACvG,WAAO,eAAe,KAAK,KAAK,GAAG;EACrC,MAAQ,KAAI,GAAG,IAAI,IAAI;AACvB;AAEA,SAAS,MAAM,GAAG;AACjB,MAAI,OAAO,MAAM,SAAU,QAAO;AAElC,MAAI,IAAE,GAAG,GAAG,MAAM,KAAK,MAAI,OAAO,UAAU,SAAS,KAAK,CAAC;AAE3D,MAAI,QAAQ,mBAAmB;AAC9B,UAAM,OAAO,OAAO,EAAE,aAAa,IAAI;EACzC,WAAY,QAAQ,kBAAkB;AACpC,UAAM,MAAM,EAAE,MAAM;EACtB,WAAY,QAAQ,gBAAgB;AAClC,UAAM,oBAAI;AACV,MAAE,QAAQ,SAAU,KAAK;AACxB,UAAI,IAAI,MAAM,GAAG,CAAC;IACrB,CAAG;EACH,WAAY,QAAQ,gBAAgB;AAClC,UAAM,oBAAI;AACV,MAAE,QAAQ,SAAU,KAAK,KAAK;AAC7B,UAAI,IAAI,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC;IACjC,CAAG;EACH,WAAY,QAAQ,iBAAiB;AACnC,UAAM,oBAAI,KAAK,CAAC,CAAC;EACnB,WAAY,QAAQ,mBAAmB;AACrC,UAAM,IAAI,OAAO,EAAE,QAAQ,EAAE,KAAK;EACpC,WAAY,QAAQ,qBAAqB;AACvC,UAAM,IAAI,EAAE,YAAa,MAAM,EAAE,MAAM,CAAC;EAC1C,WAAY,QAAQ,wBAAwB;AAC1C,UAAM,EAAE,MAAM,CAAC;EACjB,WAAY,IAAI,MAAM,EAAE,MAAM,UAAU;AAGtC,UAAM,IAAI,EAAE,YAAY,CAAC;EAC3B;AAEC,MAAI,KAAK;AACR,SAAK,OAAK,OAAO,sBAAsB,CAAC,GAAG,IAAI,KAAK,QAAQ,KAAK;AAChE,UAAI,KAAK,KAAK,CAAC,GAAG,OAAO,yBAAyB,GAAG,KAAK,CAAC,CAAC,CAAC;IAChE;AAEE,SAAK,IAAE,GAAG,OAAK,OAAO,oBAAoB,CAAC,GAAG,IAAI,KAAK,QAAQ,KAAK;AACnE,UAAI,OAAO,eAAe,KAAK,KAAK,IAAE,KAAK,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,EAAG;AACnE,UAAI,KAAK,GAAG,OAAO,yBAAyB,GAAG,CAAC,CAAC;IACpD;EACA;AAEC,SAAO,OAAO;AACf;AAoBA,SAAS,WAAW,MAAM,EAAE,SAAQ,IAAK,CAAA,GAAI;AACzC,MAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC3C,UAAM,IAAI,UAAU,qDAAqD;EACjF;AACI,MAAI,aAAa,UAAU,OAAO,UAAU,SAAS,KAAK,QAAQ,MAAM,gBAAgB;AACpF,UAAM,IAAI,UAAU,oDAAoD;EAChF;AACI,QAAM,QAAQ,CAAC,IAAI;AACnB,SAAO,MAAM,SAAS,GAAG;AACrB,UAAM,MAAM,MAAM,IAAG;AACrB,QAAI,OAAO,QAAQ,YAAY,QAAQ,QAAQ,OAAO,SAAS,GAAG,GAAG;AACjE;IACZ;AAEQ,UAAM,WAAW,CAAA;AACjB,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,eAAS,OAAO,GAAG,OAAO,IAAI,QAAQ,QAAQ;AAC1C,iBAAS,KAAK,IAAI,IAAI,CAAC;MACvC;IACA,OACa;AACD,iBAAW,OAAO,KAAK;AACnB,YAAI,OAAO,OAAO,KAAK,GAAG,KAAK,CAAC,UAAU,MAAM,GAAG,GAAG;AAClD,mBAAS,KAAK,IAAI,GAAG,CAAC;QAC1C;MACA;IACA;AAEQ,WAAO,OAAO,GAAG;AAEjB,UAAM,KAAK,GAAG,QAAQ;EAC9B;AACI,SAAO;AACX;AACA,SAAS,UAAU,WAAW,WAAW;AACrC,MAAI,OAAO,UAAU,SAAS,KAAK,MAAM,MAAM,mBAAmB;AAC9D,UAAM,IAAI,UAAU,6CAA6C;EACzE;AACI,MAAI,UAAU,WAAW,GAAG;AACxB,UAAM,IAAI,UAAU,gDAAgD;EAC5E;AACI,WAAS,OAAO,GAAG,OAAO,UAAU,QAAQ,QAAQ;AAChD,QAAI,OAAO,UAAU,SAAS,KAAK,UAAU,IAAI,CAAC,MAAM,mBAAmB;AACvE,YAAM,IAAI,UAAU,+BAA+B,IAAI,sBAAsB;IACzF;EACA;AAEI,MAAI,UAAU,WAAW,GAAG;AACxB,UAAM,QAAQ,CAAA;AACd,eAAW,OAAO,WAAW;AACzB,YAAM,KAAK,EAAE,QAAQ,QAAQ,IAAG,CAAE;IAC9C;AACQ,WAAO,MAAM,SAAS,GAAG;AACrB,YAAM,EAAE,QAAAA,SAAQ,OAAM,IAAK,MAAM,IAAG;AACpC,iBAAW,QAAQ,QAAQ;AACvB,YAAI,OAAO,OAAO,QAAQ,IAAI,GAAG;AAC7B,gBAAM,cAAc,OAAO,IAAI;AAC/B,gBAAM,cAAcA,QAAO,IAAI;AAE/B,cAAI,OAAO,OAAOA,SAAQ,IAAI,KAAK,aAAa,gBAAgB,UAC5D,aAAa,gBAAgB,QAAQ;AACrC,kBAAM,KAAK,EAAE,QAAQ,aAAa,QAAQ,YAAW,CAAE;UAC/E,OACyB;AACD,YAAAA,QAAO,IAAI,IAAI;UACvC;QACA;MACA;IACA;EACA,OAEK;AACG,UAAM,QAAQ,CAAC,EAAE,QAAQ,SAAS,UAAS,CAAE;AAC7C,WAAO,MAAM,SAAS,GAAG;AACrB,YAAM,EAAE,QAAAA,SAAQ,QAAO,IAAK,MAAM,IAAG;AACrC,iBAAW,UAAU,SAAS;AAC1B,mBAAW,QAAQ,QAAQ;AACvB,cAAI,OAAO,OAAO,QAAQ,IAAI,GAAG;AAC7B,kBAAM,cAAc,OAAO,IAAI;AAC/B,kBAAM,cAAcA,QAAO,IAAI;AAE/B,gBAAI,OAAO,OAAOA,SAAQ,IAAI,KAAK,aAAa,gBAAgB,UAC5D,aAAa,gBAAgB,QAAQ;AACrC,cAAAA,QAAO,IAAI,IAAI,OAAO,OAAO,CAAA,GAAI,WAAW;AAC5C,oBAAM,KAAK,EAAE,QAAQA,QAAO,IAAI,GAAG,SAAS,CAAC,WAAW,EAAC,CAAE;YACvF,OAC6B;AACD,cAAAA,QAAO,IAAI,IAAI;YAC3C;UACA;QACA;MACA;IACA;EACA;AACI,SAAO;AACX;AAcA,SAAS,SAAS,MAAM,EAAE,SAAQ,IAAK,CAAA,GAAI;AACvC,MAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC3C,UAAM,IAAI,UAAU,mDAAmD;EAC/E;AACI,MAAI,aAAa,UAAU,OAAO,UAAU,SAAS,KAAK,QAAQ,MAAM,gBAAgB;AACpF,UAAM,IAAI,UAAU,kDAAkD;EAC9E;AACI,QAAM,QAAQ,CAAC,IAAI;AACnB,SAAO,MAAM,SAAS,GAAG;AACrB,UAAM,MAAM,MAAM,IAAG;AACrB,QAAI,OAAO,QAAQ,YAAY,QAAQ,QAAQ,OAAO,SAAS,GAAG,GAAG;AACjE;IACZ;AAEQ,UAAM,WAAW,CAAA;AACjB,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,eAAS,OAAO,GAAG,OAAO,IAAI,QAAQ,QAAQ;AAC1C,iBAAS,KAAK,IAAI,IAAI,CAAC;MACvC;IACA,OACa;AACD,iBAAW,OAAO,KAAK;AACnB,YAAI,OAAO,OAAO,KAAK,GAAG,KAAK,CAAC,UAAU,MAAM,GAAG,GAAG;AAClD,mBAAS,KAAK,IAAI,GAAG,CAAC;QAC1C;MACA;IACA;AAEQ,WAAO,KAAK,GAAG;AAEf,UAAM,KAAK,GAAG,QAAQ;EAC9B;AACI,SAAO;AACX;AAaA,SAAS,YAAY,QAAQ,UAAU;AACnC,MAAI,OAAO,WAAW,YAAY,WAAW,QAAQ,WAAW,QAAQ;AACpE,WAAO;EACf;AAEI,QAAM,cAAc,OAAO,yBAAyB,QAAQ,QAAQ;AACpE,MAAI,gBAAgB,UAAU,YAAY,QAAQ,UAAU,YAAY,QAAQ,QAAQ;AACpF,WAAO;EACf;AAEI,WAAS,IAAI,OAAO,eAAe,MAAM,GAAG,GAAG,IAAI,OAAO,eAAe,CAAC,GAAG;AACzE,UAAM,aAAa,OAAO,yBAAyB,GAAG,QAAQ;AAC9D,QAAI,eAAe,UAAU,WAAW,QAAQ,UAAU,WAAW,QAAQ,QAAQ;AACjF,aAAO;IACnB;EACA;AACI,SAAO;AACX;AAaA,SAAS,UAAU,QAAQ,UAAU;AACjC,MAAI,OAAO,WAAW,YAAY,WAAW,QAAQ,WAAW,QAAQ;AACpE,WAAO;EACf;AAEI,QAAM,cAAc,OAAO,yBAAyB,QAAQ,QAAQ;AACpE,MAAI,gBAAgB,UAAU,YAAY,QAAQ,QAAQ;AACtD,WAAO;EACf;AAEI,WAAS,IAAI,OAAO,eAAe,MAAM,GAAG,GAAG,IAAI,OAAO,eAAe,CAAC,GAAG;AACzE,UAAM,aAAa,OAAO,yBAAyB,GAAG,QAAQ;AAC9D,QAAI,eAAe,UAAU,WAAW,QAAQ,QAAQ;AACpD,aAAO;IACnB;EACA;AACI,SAAO;AACX;AAYA,SAAS,aAAa,QAAQ,WAAW;AACrC,MAAI,OAAO,WAAW,YAAY;AAC9B,WAAO;EACf;AACI,MAAI,WAAW,WAAW;AACtB,WAAO;EACf;AAEI,WAAS,QAAQ,OAAO,eAAe,MAAM,GAAG,OAAO,QAAQ,OAAO,eAAe,KAAK,GAAG;AACzF,QAAI,UAAU,WAAW;AACrB,aAAO;IACnB;EACA;AACI,SAAO;AACX;AAaA,SAAS,UAAU,QAAQ,UAAU;AACjC,MAAI,OAAO,WAAW,YAAY,WAAW,QAAQ,WAAW,QAAQ;AACpE,WAAO;EACf;AAEI,QAAM,cAAc,OAAO,yBAAyB,QAAQ,QAAQ;AACpE,MAAI,gBAAgB,UAAU,YAAY,QAAQ,QAAQ;AACtD,WAAO;EACf;AAEI,WAAS,IAAI,OAAO,eAAe,MAAM,GAAG,GAAG,IAAI,OAAO,eAAe,CAAC,GAAG;AACzE,UAAM,aAAa,OAAO,yBAAyB,GAAG,QAAQ;AAC9D,QAAI,eAAe,UAAU,WAAW,QAAQ,QAAQ;AACpD,aAAO;IACnB;EACA;AACI,SAAO;AACX;AAQA,SAAS,gBAAgB,OAAO;AAC5B,MAAI,OAAO,UAAU,YAAY,UAAU,QAAQ,UAAU,QAAQ;AACjE,WAAO;EACf;AACI,SAAO,OAAO,iBAAiB;AACnC;AAQA,SAAS,WAAW,OAAO;AACvB,MAAI,UAAU,QAAQ,UAAU,UAAU,OAAO,UAAU,UAAU;AACjE,WAAO;EACf;AACI,SAAO,OAAO,YAAY;AAC9B;AAQA,SAAS,SAAS,OAAO;AACrB,SAAO,UAAU,QAAQ,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,KAAK;AAC9E;AAUA,SAAS,cAAc,OAAO;AAC1B,MAAI,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM,mBAAmB;AAC7D,WAAO;EACf;AACI,QAAM,YAAY,OAAO,eAAe,KAAK;AAC7C,SAAO,cAAc,QAAQ,cAAc,OAAO;AACtD;AAQA,SAAS,WAAW,QAAQ;AACxB,SAAO,OAAO,WAAW,YAAY,WAAW,OAAO,OAAO,KAAK,MAAM,IAAI,CAAA;AACjF;AAQA,SAAS,WAAW,QAAQ;AACxB,MAAI,WAAW,UAAU,WAAW,QAAQ,OAAO,WAAW,UAAU;AACpE,WAAO;EACf;AACI,QAAM,MAAM,OAAO,UAAU,SAAS,KAAK,MAAM;AACjD,MAAI,QAAQ,kBAAkB,QAAQ,gBAAgB;AAClD,WAAO,OAAO;EACtB;AACI,MAAI,QAAQ,mBAAmB;AAC3B,WAAO,OAAO;EACtB;AACI,SAAO,OAAO,KAAK,MAAM,EAAE;AAC/B;AAkBA,SAAS,WAAW,MAAM,UAAU,cAAc;AAC9C,MAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC3C,WAAO;EACf;AACI,MAAI,OAAO,aAAa,UAAU;AAC9B,WAAO;EACf;AACI,QAAM,OAAO,SAAS,MAAM,GAAG;AAC/B,MAAI,SAAS;AAEb,WAAS,OAAO,GAAG,OAAO,KAAK,QAAQ,QAAQ;AAE3C,QAAI,OAAO,KAAK,IAAI,CAAC,MAAM,UAAU,OAAO,KAAK,IAAI,CAAC,MAAM,MAAM;AAC9D,aAAO;IACnB;AACQ,aAAS,OAAO,KAAK,IAAI,CAAC;EAClC;AACI,SAAO;AACX;AAoBA,SAAS,UAAU,QAAQ,QAAQ,SAAS;AACxC,MAAI,OAAO,WAAW,YAAY,WAAW,QAAQ,OAAO,WAAW,YAAY,WAAW,MAAM;AAChG,WAAO;EACf;AACI,aAAW,YAAY,gBAAgB,QAAQ,OAAO,GAAG;AACrD,UAAM,oBAAoB,WAAW,QAAQ,QAAQ;AACrD,UAAM,oBAAoB,WAAW,QAAQ,QAAQ;AACrD,QAAI,sBAAsB,mBAAmB;AACzC,aAAO;IACnB;EACA;AACI,SAAO;AACX;AAgBA,UAAU,gBAAgB,MAAM,EAAE,aAAa,MAAM,aAAa,KAAI,IAAK,CAAA,GAAI;AAC3E,MAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC3C,UAAM,IAAI,UAAU,iDAAiD;EAC7E;AACI,MAAI,OAAO,eAAe,WAAW;AACjC,UAAM,IAAI,UAAU,+DAA+D;EAC3F;AACI,MAAI,OAAO,eAAe,WAAW;AACjC,UAAM,IAAI,UAAU,+DAA+D;EAC3F;AACI,QAAM,QAAQ,CAAC,EAAE,KAAK,MAAM,QAAQ,GAAE,CAAE;AACxC,SAAO,MAAM,SAAS,GAAG;AACrB,UAAM,EAAE,KAAK,OAAM,IAAK,MAAM,IAAG;AACjC,eAAW,OAAO,KAAK;AACnB,UAAI,cAAc,CAAC,OAAO,OAAO,KAAK,GAAG,GAAG;AACxC;MAChB;AACY,YAAM,UAAU,SAAS,GAAG,MAAM,IAAI,GAAG,KAAK;AAC9C,YAAM,QAAQ,IAAI,GAAG;AACrB,UAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,YAAI,CAAC,YAAY;AACb;QACpB;AACgB,iBAAS,OAAO,GAAG,OAAO,MAAM,QAAQ,QAAQ;AAC5C,gBAAM,GAAG,OAAO,IAAI,IAAI;QAC5C;MACA,WACqB,OAAO,UAAU,YAAY,UAAU,MAAM;AAClD,cAAM,KAAK,EAAE,KAAK,OAAO,QAAQ,QAAO,CAAE;MAC1D,WACqB,OAAO,UAAU,YAAY;AAClC,cAAM;MACtB;IACA;EACA;AACA;AAsBA,SAAS,QAAQ,MAAM,UAAU,OAAO,EAAE,YAAY,OAAO,gBAAgB,MAAK,IAAK,CAAA,GAAI;AACvF,MAAI,OAAO,SAAS,YAAY,SAAS,MAAM;AAC3C,UAAM,IAAI,UAAU,yCAAyC;EACrE;AACI,MAAI,OAAO,aAAa,UAAU;AAC9B,UAAM,IAAI,UAAU,4CAA4C;EACxE;AACI,MAAI,OAAO,cAAc,UAAU;AAC/B,UAAM,IAAI,UAAU,qDAAqD;EACjF;AACI,MAAI,cAAc,SAAS,cAAc,SAAS,cAAc,UAAU,cAAc,SACpF,cAAc,mBAAmB,cAAc,OAAO;AACtD,UAAM,IAAI,MAAM,6CAA6C;EACrE;AACI,MAAI,OAAO,kBAAkB,WAAW;AACpC,UAAM,IAAI,UAAU,0DAA0D;EACtF;AACI,QAAM,SAAS,SAAS,MAAM,GAAG;AACjC,MAAI,SAAS;AAEb,MAAI,OAAO,WAAW,KAAK,CAAC,iBAAiB,EAAE,OAAO,CAAC,KAAK,OAAO;AAC/D,WAAO;EACf;AAEI,WAAS,OAAO,GAAG,OAAO,OAAO,QAAQ,QAAQ;AAE7C,QAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,YAAM,SAAU,CAAC,OAAO,IAAI;AAC5B,UAAI,CAAC,OAAO,UAAU,MAAM,KAAK,SAAS,GAAG;AACzC,eAAO;MACvB;IACA;AACQ,QAAI,SAAS,OAAO,SAAS,GAAG;AAC5B,cAAQ,WAAS;QACb,KAAK;AACD,eAAK,OAAO,IAAI,CAAC,KAAK;AACtB,mBAAS;AACT;QACJ,KAAK;AACD,eAAK,OAAO,IAAI,CAAC,KAAK;AACtB,mBAAS;AACT;QACJ,KAAK;AACD,eAAK,OAAO,IAAI,CAAC,KAAK;AACtB,mBAAS;AACT;QACJ,KAAK;AACD,eAAK,OAAO,IAAI,CAAC,IAAI;AACrB,mBAAS;AACT;QACJ,KAAK;AACD,cAAI,KAAK,OAAO,IAAI,CAAC,MAAM,QAAQ;AAC/B,iBAAK,OAAO,IAAI,CAAC,IAAI;UAC7C;AACoB,mBAAS;AACT;QACJ,KAAK;AACD,eAAK,OAAO,IAAI,CAAC,KAAK;AACtB,mBAAS;AACT;MACpB;IACA,OACa;AAED,UAAI,iBAAiB,KAAK,OAAO,IAAI,CAAC,MAAM,QAAQ;AAChD,aAAK,OAAO,IAAI,CAAC,IAAI,CAAA;MACrC;AAEY,UAAI,KAAK,OAAO,IAAI,CAAC,MAAM,QAAQ,OAAO,KAAK,OAAO,IAAI,CAAC,MAAM,UAAU;AACvE,eAAO;MACvB;AACY,aAAO,KAAK,OAAO,IAAI,CAAC;IACpC;EACA;AACI,SAAO;AACX;",
  "names": ["target"]
}
